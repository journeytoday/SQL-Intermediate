-- Create the 'employees' table
CREATE TABLE employees (
  emp_id INT PRIMARY KEY,
  emp_name VARCHAR(100),
  emp_salary DECIMAL(10, 2),
  emp_department VARCHAR(50),
  emp_manager_id INT
);

-- Insert sample data into the 'employees' table
INSERT INTO employees (emp_id, emp_name, emp_salary, emp_department, emp_manager_id)
VALUES (1, 'Alice Smith', 5000.00, 'HR', 5),
       (2, 'Bob Johnson', 6000.00, 'Finance', 5),
       (3, 'Charlie Brown', 4500.00, 'IT', 6),
       (4, 'David Lee', 5500.00, 'Finance', 6),
       (5, 'Eva Chen', 7000.00, 'HR', NULL),
       (6, 'Frank Adams', 8000.00, 'IT', 5),
       (7, 'Grace Kim', 6500.00, 'HR', 5),
       (8, 'Henry Liu', 7500.00, 'Finance', 6);

-- Create the 'departments' table
CREATE TABLE departments (
  dept_id INT PRIMARY KEY,
  dept_name VARCHAR(50),
  dept_location VARCHAR(100)
);

-- Insert sample data into the 'departments' table
INSERT INTO departments (dept_id, dept_name, dept_location)
VALUES (1, 'HR', 'New York'),
       (2, 'Finance', 'Los Angeles'),
       (3, 'IT', 'San Francisco');

-- Create a view for the 'employees' table with an alias
CREATE VIEW emp_view AS
SELECT emp_id, emp_name, emp_salary, emp_department, emp_manager_id
FROM employees;

-- Create an index on the 'emp_salary' column of the 'employees' table for faster querying
CREATE INDEX idx_emp_salary ON employees (emp_salary);

-- Create a constraint on the 'emp_department' column of the 'employees' table to ensure it is not NULL
ALTER TABLE employees
ADD CONSTRAINT chk_emp_department_not_null CHECK (emp_department IS NOT NULL);

-- Create a constraint on the 'emp_id' column of the 'employees' table to ensure it is unique
ALTER TABLE employees
ADD CONSTRAINT uc_emp_id UNIQUE (emp_id);

-- Create a constraint on the 'dept_id' column of the 'departments' table to ensure it is unique
ALTER TABLE departments
ADD CONSTRAINT uc_dept_id UNIQUE (dept_id);

-- Create a constraint on the 'dept_name' column of the 'departments' table to ensure it is not NULL
ALTER TABLE departments
MODIFY COLUMN dept_name VARCHAR(50) NOT NULL;

-- Create a foreign key constraint on the 'emp_manager_id' column of the 'employees' table
ALTER TABLE employees
ADD CONSTRAINT fk_emp_manager_id FOREIGN KEY (emp_manager_id) REFERENCES employees(emp_id);

-- Perform a JOIN operation to retrieve employee details along with their department information
SELECT emp_view.emp_id, emp_view.emp_name, emp_view.emp_salary, departments.dept_name, departments.dept_location
FROM emp_view
JOIN departments ON emp_view.emp_department = departments.dept_name;

-- Perform a LEFT JOIN operation to retrieve all employees along with their department information, including employees with NULL department
SELECT emp_view.emp_id, emp_view.emp_name, emp_view.emp_salary, departments.dept_name, departments.dept_location
FROM emp_view
LEFT JOIN departments ON emp_view.emp_department = departments.dept_name;

-- Perform a RIGHT JOIN operation to retrieve all departments along with their employees information, including departments with no employees
SELECT departments.dept_id, departments.dept_name, departments.dept_location, emp_view.emp_id, emp_view.emp_name, emp_view.emp_salary
FROM departments
RIGHT JOIN emp_view ON emp_view.emp_department = departments.dept_name;

-- Perform an INNER JOIN operation to retrieve employees who have managers along with their manager's information
SELECT e.emp_id, e.emp_name, e.emp_salary, e.emp_department, e.emp_manager_id, m.emp_name as manager_name, m.emp_department as manager_department
FROM employees e
JOIN employees m ON e.emp_manager_id = m.emp_id;

-- Perform a GROUP BY operation to retrieve department-wise average salary and total number of employees
SELECT emp_department, AVG(emp_salary) as avg_salary, COUNT(*) as total_employees
FROM employees
GROUP BY emp_department;

-- Perform an ORDER BY operation to retrieve employees sorted by salary in descending order
SELECT emp_id, emp_name, emp_salary, emp_department
FROM employees
ORDER BY emp_salary DESC;

-- Perform a LIMIT operation to retrieve the top 5 highest salaried employees
SELECT emp_id, emp_name, emp_salary, emp_department
FROM employees
ORDER BY emp_salary DESC
LIMIT 5;

-- Perform an UPDATE operation to increase the salary of all employees in the 'Finance' department by 10%
UPDATE employees
SET emp_salary = emp_salary * 1.10
WHERE emp_department = 'Finance';

-- Perform a DELETE operation to remove all employees with NULL department
DELETE FROM employees
WHERE emp_department IS NULL;

-- Retrieve the department-wise average salary and total number of employees
SELECT emp_department, AVG(emp_salary) as avg_salary, COUNT(*) as total_employees
FROM employees
GROUP BY emp_department;

-- Retrieve the top 5 highest salaried employees
SELECT emp_id, emp_name, emp_salary, emp_department
FROM employees
ORDER BY emp_salary DESC
LIMIT 5;

-- Retrieve the department-wise employee count and total salary
SELECT emp_department, COUNT(*) as total_employees, SUM(emp_salary) as total_salary
FROM employees
GROUP BY emp_department;

-- Retrieve the employee with the highest salary
SELECT emp_id, emp_name, emp_salary, emp_department
FROM employees
ORDER BY emp_salary DESC
LIMIT 1;

-- Retrieve the employee with the lowest salary
SELECT emp_id, emp_name, emp_salary, emp_department
FROM employees
ORDER BY emp_salary ASC
LIMIT 1;

-- Retrieve the average salary of all employees
SELECT AVG(emp_salary) as avg_salary
FROM employees;

-- Retrieve the total salary of all employees
SELECT SUM(emp_salary) as total_salary
FROM employees;

-- Retrieve the department-wise employee count
SELECT emp_department, COUNT(*) as total_employees
FROM employees
GROUP BY emp_department;

-- Retrieve the employees who have the highest salary in their respective department
SELECT e.emp_id, e.emp_name, e.emp_salary, e.emp_department
FROM employees e
JOIN (
SELECT emp_department, MAX(emp_salary) as max_salary
FROM employees
GROUP BY emp_department
) AS max_salary_per_dept ON e.emp_department = max_salary_per_dept.emp_department AND e.emp_salary = max_salary_per_dept.max_salary;

-- Retrieve the employees who have the lowest salary in their respective department
SELECT e.emp_id, e.emp_name, e.emp_salary, e.emp_department
FROM employees e
JOIN (
SELECT emp_department, MIN(emp_salary) as min_salary
FROM employees
GROUP BY emp_department
) AS min_salary_per_dept ON e.emp_department = min_salary_per_dept.emp_department AND e.emp_salary = min_salary_per_dept.min_salary;

-- Retrieve the employees who have the same manager
SELECT e1.emp_id, e1.emp_name, e1.emp_salary, e1.emp_department, e1.emp_manager_id, e2.emp_id as manager_emp_id, e2.emp_name as manager_emp_name
FROM employees e1
JOIN employees e2 ON e1.emp_manager_id = e2.emp_id
ORDER BY e1.emp_manager_id;

-- Retrieve the employees who do not have any manager
SELECT emp_id, emp_name, emp_salary, emp_department
FROM employees
WHERE emp_manager_id IS NULL;

-- Retrieve the employees who have at least one employee reporting to them
SELECT e1.emp_id, e1.emp_name, e1.emp_salary, e1.emp_department, e2.emp_id as reportee_emp_id, e2.emp_name as reportee_emp_name
FROM employees e1
JOIN employees e2 ON e1.emp_id = e2.emp_manager_id
ORDER BY e1.emp_id;
